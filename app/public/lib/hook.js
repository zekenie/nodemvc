// Generated by CoffeeScript 1.7.1
(function() {
  var Hook, possibleActions, possibleHooks, template,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  template = '<tr class="hook"> <td> <select autofocus class="form-control" rv-value="hook" data-grab="hookSelect"> <option></option> </select> </td> <td> <select class="form-control" rv-value="action" data-grab="actionSelect"> <option></option> </select> </td> <td> <input rv-value="comment" class="form-control" type="text"> </td> <td class="delete" width="9%"><button data-grab="deleteBtn" class="btn btn-sm btn-danger"><span class="glyphicon glyphicon-remove"></span></button></td> </tr>';

  possibleHooks = ['pre', 'post'];

  possibleActions = ['save', 'remove'];

  Hook = (function(_super) {
    __extends(Hook, _super);

    function Hook(data, parent) {
      data = _.extend({
        hook: '',
        action: '',
        comment: ''
      }, data);
      this.el = $(_.template(template, this));
      Hook.__super__.constructor.apply(this, arguments);
      this.parent.hooksContainer.append(this.el);
      this.addEventListeners();
    }

    Hook.prototype.render = function() {
      var action, hook, _i, _j, _len, _len1;
      for (_i = 0, _len = possibleHooks.length; _i < _len; _i++) {
        hook = possibleHooks[_i];
        this.hookSelect.append('<option>' + hook + '</option>');
      }
      for (_j = 0, _len1 = possibleActions.length; _j < _len1; _j++) {
        action = possibleActions[_j];
        this.actionSelect.append('<option>' + action + '</option>');
      }
      this.hookSelect.val(this.hook);
      this.actionSelect.val(this.action);
      return Hook.__super__.render.call(this);
    };

    Hook.prototype.addEventListeners = function() {
      var self;
      self = this;
      return this.deleteBtn.on('click', function() {
        return self.remove();
      });
    };

    Hook.prototype.toJSON = function() {
      return _.pick(this, 'comment', 'action', 'hook');
    };

    return Hook;

  })(classes.Base);

  classes.Hook = Hook;

}).call(this);
