// Generated by CoffeeScript 1.7.1
(function() {
  var Entity, children, pillTemplate, template,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  children = {
    'Controller': 'controllers'
  };

  pillTemplate = '<li class="active"><a href="#<%=id%>" data-toggle="pill">{singular}</a></li>';

  template = '<div class="tab-pane" id="<%=id%>"> <div class="row dark"> <div class="col-md-6"> <input autofocus class="input-lg form-control" data-grab="singularInput" rv-input="singular | firstLower" placeholder="Singular name (eg user)"> </div> <div class="col-md-6"> <input class="input-lg form-control" data-grab="pluralInput" rv-input="plural | firstCap" placeholder="Plural name (eg Users)"> </div> </div> <div class="row"> <div class="col-md-6" data-grab="modelContainer"></div> <div class="col-md-6" data-grab="controllersContainer"> <div class="page-header"> <h3 >Controllers <button class="btn btn-xs btn-success pull-right" data-grab="addControllerBtn">+</button> </h3> </div> </div> </div> </div>';

  Entity = (function(_super) {
    __extends(Entity, _super);

    function Entity(data, parent) {
      var pill;
      data = _.extend({
        model: {},
        controllers: [],
        singular: '',
        plural: ''
      }, data);
      this.id = this.id || _.uniqueId(this.constructor.name + '_');
      this.el = $(_.template(template, this));
      Entity.__super__.constructor.apply(this, arguments);
      this.model = new classes.Model(this.model, this);
      $(".tab-content").append(this.el);
      $(".tab-pane").removeClass("active");
      this.el.addClass('active');
      $('.nav-pills li').removeClass('active');
      pill = $(_.template(pillTemplate, this));
      rivets.bind(pill, this);
      this.parent.pills.append(pill);
      this.instanciateChildren(children);
      this.addEventListeners();
    }

    Entity.prototype.addController = function() {
      this.controllers.push(new classes.Controller({}, this));
      return this.trigger('addControllerEvt');
    };

    Entity.prototype.addEventListeners = function() {
      var self;
      self = this;
      this.addControllerBtn.on('click', $.proxy(this.addController, this));
      this.pluralInput.on('blur', function() {
        return self.set('singular', pluralize.singular(this.value.charAt(0).toLowerCase() + this.value.slice(1)));
      });
      return this.singularInput.on('blur', function() {
        return self.set('plural', pluralize(this.value.charAt(0).toUpperCase() + this.value.slice(1)));
      });
    };

    Entity.prototype.toJSON = function() {
      var resp;
      resp = _.pick(this, 'plural', 'singular');
      resp.model = this.model.toJSON();
      resp.controllers = _.map(this.controllers, function(c) {
        return c.toJSON();
      });
      return resp;
    };

    return Entity;

  })(classes.Base);

  classes.Entity = Entity;

}).call(this);
