// Generated by CoffeeScript 1.6.3
(function() {
  var Model, children, template,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  children = {
    Property: 'properties',
    Method: 'methods',
    Hook: 'hooks'
  };

  template = '<div class="model">\
					<div class="page-header">\
						<h3>Model:</h3>\
					</div>\
\
					<div class="panel panel-default">\
						<div class="panel-heading">\
							Props\
							<button class="btn pull-right btn-xs btn-success" data-grab="addPropertyBtn">+</button>\
						</div>\
						<table class="table table-condensed">\
							<thead>\
								<tr>\
									<th></th>\
									<th>Key</th>\
									<th>Type</th>\
									<th>Reference</th>\
									<th></th>\
								</tr>\
							</thead>\
							<tbody data-grab="propertiesContainer"></tbody>\
						</table>\
					</div>\
					<div class="panel panel-default">\
						<div class="panel-heading">\
							Hooks\
							<button class="btn btn-xs btn-success pull-right" data-grab="addHookBtn">+</button>\
						</div>\
						<table class="table table-condensed">\
							<thead>\
								<tr>\
									<th>Type</th>\
									<th>Action</th>\
									<th>Comment</th>\
									<th></th>\
								</tr>\
							</thead>\
							<tbody data-grab="hooksContainer"></tbody>\
						</table>\
					</div>\
					<div class="panel panel-default">\
						<div class="panel-heading">\
							Methods <small class="pull-right">One per line</small>\
							<!--<button class="btn btn-xs pull-right" data-grab="addMethodBtn">+</button>-->\
						</div>\
						<div class="panel-body">\
							<div class="row">\
								<div class="col-xs-4"><strong>Statics</strong></div>\
								<div class="col-xs-4"><strong>Instance</strong></div>\
								<div class="col-xs-4"><strong>Virtuals</strong></div>\
							</div>\
							<div class="row">\
								<div class="col-xs-4"><textarea rv-value="statics | lineToArray" class="form-control"></textarea></div>\
								<div class="col-xs-4"><textarea rv-value="instance | lineToArray" class="form-control"></textarea></div>\
								<div class="col-xs-4"><textarea rv-value="virtuals | lineToArray" class="form-control"></textarea></div>\
							</div>\
						</div>\
					</div>\
				</div>';

  Model = (function(_super) {
    __extends(Model, _super);

    function Model(data, parent) {
      data = _.extend({
        hooks: [],
        properties: [],
        instance: [],
        statics: [],
        virtuals: []
      }, data);
      this.el = $(_.template(template, this));
      Model.__super__.constructor.apply(this, arguments);
      this.parent.modelContainer.append(this.el);
      this.instanciateChildren(children);
      this.addEventListeners();
    }

    Model.prototype.addHook = function() {
      return this.hooks.push(new classes.Hook({}, this));
    };

    Model.prototype.addProperty = function() {
      return this.properties.push(new classes.Property({}, this));
    };

    Model.prototype.addEventListeners = function() {
      var self;
      self = this;
      this.addHookBtn.on('click', $.proxy(this.addHook, this));
      return this.addPropertyBtn.on('click', $.proxy(this.addProperty, this));
    };

    Model.prototype.toJSON = function() {
      var resp, type, _i, _len, _ref;
      resp = _.pick(this, 'statics', 'instance', 'virtuals');
      _ref = ['hooks', 'properties'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        resp[type] = this[type].map(function(e) {
          return e.toJSON();
        });
      }
      return resp;
    };

    return Model;

  })(classes.Base);

  classes.Model = Model;

}).call(this);
