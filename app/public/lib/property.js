// Generated by CoffeeScript 1.6.3
(function() {
  var Property, possibleTypes, template,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  template = '<tr class="property">\
				<td><button data-grab="arrayBtn" type="button" class="btn btn-default btn-sm" data-toggle="button">[ ]</button></td>\
				<td><input autofocus class="form-control" type="text" size="6" placeholder="key" rv-input="key | codeSafe"></td>\
				<td>\
					<select data-grab="typeSelect" rv-value="type" class="form-control">\
						<option></option>\
					</select>\
				</td>\
				<td>\
					<select data-grab="refSelect" rv-value="ref" class="hide form-control">\
						<option></option>\
					</select>\
				</td>\
				<td class="delete" width="9%"><button data-grab="deleteBtn" class="btn btn-sm btn-danger"><span class="glyphicon glyphicon-remove"></span></button></td>\
			</tr>';

  possibleTypes = ["String", "Number", "Boolean", "Array", "Buffer", "Date", "ObjectId", "Mixed"];

  Property = (function(_super) {
    __extends(Property, _super);

    function Property(data, parent) {
      data = _.extend({
        key: '',
        type: '',
        array: false,
        ref: ''
      }, data);
      this.el = $(_.template(template, this));
      this.project = parent.parent.parent;
      Property.__super__.constructor.apply(this, arguments);
      this.parent.propertiesContainer.append(this.el);
      this.addEventListeners();
    }

    Property.prototype.renderRefs = function() {
      var entity, _i, _len, _ref;
      this.refSelect.html('<option></option>');
      _ref = _.pluck(this.project.entities, 'plural');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        this.refSelect.append('<option>' + entity + '</option>');
      }
      return this.refSelect.val(this.ref);
    };

    Property.prototype.render = function() {
      var type, _i, _len;
      for (_i = 0, _len = possibleTypes.length; _i < _len; _i++) {
        type = possibleTypes[_i];
        this.typeSelect.append('<option>' + type + '</option>');
      }
      this.typeSelect.val(this.hook);
      if (this.array === true) {
        this.arrayBtn.addClass('active');
      }
      this.renderRefs();
      return Property.__super__.render.call(this);
    };

    Property.prototype.addEventListeners = function() {
      var self;
      self = this;
      this.arrayBtn.on('click', function() {
        self.array = !self.array;
        return true;
      });
      this.project.on('addEntityEvt', function() {
        return self.renderRefs();
      });
      this.typeSelect.on('change', function() {
        self.refSelect.addClass('hide');
        if (this.value === 'ObjectId') {
          return self.refSelect.removeClass('hide');
        }
      });
      return this.deleteBtn.on('click', function() {
        return self.remove();
      });
    };

    Property.prototype.toJSON = function() {
      return _.pick(this, 'key', 'type', 'array', 'ref');
    };

    return Property;

  })(classes.Base);

  classes.Property = Property;

}).call(this);
